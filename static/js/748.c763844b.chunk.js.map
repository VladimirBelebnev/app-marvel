{"version":3,"file":"static/js/748.c763844b.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { Link } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    \n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService();\n    \n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded);\n    };  \n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        };\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended);\n    };  \n\n    function renderItems(data) {\n        const items = data.map((item) => {\n            const { id, title, price, thumbnail } = item;\n\n            const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n                ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n            return (\n                <CSSTransition\n                    key={id}\n                    timeout={600}\n                    classNames=\"comics__item\">\n                    <li\n                        className=\"comics__item\"\n                        key={id} >\n                        {/* eslint-disable-next-line */}\n                        <Link to={`/comics/${id}`}>\n                            <img src={thumbnail}\n                                alt={title}\n                                className=\"comics__item-img\"\n                                style={styleImg} />\n                            <div className=\"comics__item-name\">{title}</div>\n                            <div className=\"comics__item-price\">{price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <TransitionGroup className=\"comics__grid\" component=\"ul\">\n                {items}\n            </TransitionGroup>\n        )\n    };\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)} >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <AppBanner />\n            <ComicsList />\n        </>\n    )\n};\n\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {loading, error, getAllCharacters, getCharacter, getAllComics, getCharacterByName, getComic, clearError};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(error) {\n            setLoading(false);\n            setError(error.message);\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n};"],"names":["className","src","avengers","alt","avengersLogo","img","style","display","width","height","objectFit","margin","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","data","map","item","id","title","price","thumbnail","styleImg","CSSTransition","timeout","classNames","to","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacter","_transformComics","getComic","getCharacterByName","name","char","slice","description","path","extension","homepage","urls","wiki","comics","prices","pageCount","language","textObjects"],"sourceRoot":""}