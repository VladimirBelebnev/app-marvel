{"version":3,"file":"static/js/193.8161e8c4.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    };\n   \n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { thumbnail, name, description, homepage, wiki } = char;\n\n    const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' \n    ? {objectFit: \"contain\"} : {objectFit: \"cover\"});\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt={name} className=\"randomchar__img\" style={styleImg} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default RandomChar;","import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n \nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    };\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        };\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended)\n    };\n\n    const itemRefs = useRef([]);\n\n    const onItemFocus = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(data) {\n        const items = data.map((item, i) => {\n            const { id, name, thumbnail } = item;\n\n            const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' \n            ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n            return (\n                <CSSTransition\n                    key={id}\n                    timeout={500}\n                    classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        ref={element => itemRefs.current[i] = element}\n                        tabIndex={0}\n                        onClick={() => {\n                            props.onCharSelected(id);\n                            onItemFocus(i);\n                        }}\n                        onKeyPress={event => {\n                            if (event.key === '' || event.key === 'Enter') {\n                                props.onCharSelected(id);\n                                onItemFocus(i);\n                            }\n                        }}>\n                        <img src={thumbnail} alt={name} style={styleImg} />\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        }); \n        \n        return (\n            <TransitionGroup className=\"char__grid\" component={'ul'}>\n                {items} \n            </TransitionGroup>\n        )\n    }\n\n    const items = renderItems(charList);\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)} >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n     \n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n        ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={styleImg} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">{name}</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this chatacter.' }\n                {   \n                    // eslint-disable-next-line\n                    comics.map((item, i) => {\n                        if (i > 9) {\n                            return (\n                                <li className=\"char__comics-item\" key={i}>\n                                    <Link to={`/comics/${item.resourceURI.slice(43, 48)}`}>\n                                        {item.name}\n                                    </Link>\n                                </li>\n                            )\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n};\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}; \n\nexport default CharInfo;","import {useState} from 'react';\n\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, getCharacterByName, error, clearError} = useMarvelService();\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const UserFound = () => {\n        return (\n            <div className=\"char__userFound\">\n                <p className=\"char__search-succses\">There is! Visit {char[0].name} page?</p>\n                <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                    <div className=\"inner\">To page</div>\n                </Link>\n            </div>\n        )\n    };\n\n    const errorMessage = error ? <div className=\"char__search-error\"><ErrorMessage/></div> : null;\n    const result = !char ? null : char.length > 0 ? <UserFound /> : <p className=\"char__search-error\">The character was not found. Check the name and try again</p>\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n            }} \n            validationSchema={Yup.object({\n                name: Yup.string()\n                    .min(3, 'Minimum three symbols.')\n                    .max(30, 'Maximum thirty symbols.')\n                    .required('This field is required.'),\n            })}\n            onSubmit={({name}) => {\n                updateChar(name);\n            }}>\n            <Form className=\"char__search\">\n                <p className=\"char__search-title\">Or find a character by name:</p>\n                <Field \n                    className=\"char__search-input\" \n                    type=\"text\" \n                    placeholder='Enter name' \n                    id=\"name\" \n                    name=\"name\" />\n                <button \n                    className=\"button  button__main char__search-btn\" \n                    type=\"submit\"\n                    disabled={loading}>\n                    <div className=\"inner\">Find</div>\n                </button>\n                <FormikErrorMessage className=\"char__search-error\" name=\"name\" component=\"p\" />\n                {errorMessage}\n                {result}\n            </Form>\n        </Formik>\n    )\n};  \n\nexport default CharSearchForm;","import { Component } from \"react\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    };\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true,\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div className=\"char__content-fixed\">\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n};\n\nexport default MainPage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {loading, error, getAllCharacters, getCharacter, getAllComics, getCharacterByName, getComic, clearError};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(error) {\n            setLoading(false);\n            setError(error.message);\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n};"],"names":["src","img","style","display","width","height","objectFit","margin","alt","View","char","thumbnail","name","description","homepage","wiki","styleImg","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","onItemFocus","current","forEach","item","classList","remove","add","focus","items","data","map","i","CSSTransition","timeout","classNames","ref","element","tabIndex","onCharSelected","onKeyPress","event","key","TransitionGroup","component","renderItems","disabled","comics","to","resourceURI","slice","charId","skeleton","getCharacterByName","UserFound","result","initialValues","validationSchema","Yup","min","max","required","onSubmit","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","selectedChar","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}