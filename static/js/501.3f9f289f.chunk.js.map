{"version":3,"file":"static/js/501.3f9f289f.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport AppBanner from \"../appBanner/AppBanner\";\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams();\n    const [data, setData] = useState(null);\n    const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateData();\n        // eslint-disable-next-line\n    }, [id]);\n\n    const updateData = () => {\n        clearError();\n        // eslint-disable-next-line\n        switch (dataType) {\n            case 'comic': \n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n        }\n    };\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    };\n\n    return (\n        <>\n            <AppBanner />\n            {setContent(process, Component, data)}\n        </>\n    )\n};\n\nexport default SinglePage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {process, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getCharacterByName, \n            getComic, \n            clearError,\n            setProcess\n        };\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(error) {\n            setProcess('error');\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess};\n};","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />\n        case 'loading':\n            return <Spinner />\n        case 'error':\n            return <ErrorMessage />\n        case 'confirmed':\n            return <Component data={data} />\n        default:\n            throw new Error('Unexpected process state.');\n    }\n};\n\nexport default setContent;"],"names":["className","src","avengers","alt","avengersLogo","img","style","display","width","height","objectFit","margin","Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","setContent","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_transformComics","getCharacterByName","name","char","length","slice","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","price","prices","pageCount","language","textObjects","Spinner","ErrorMessage"],"sourceRoot":""}