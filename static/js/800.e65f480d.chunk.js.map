{"version":3,"file":"static/js/800.e65f480d.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './SingleComicPage.scss';\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n    const {loading, error, getComic, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateComic();\n        // eslint-disable-next-line\n    }, [comicId]);\n\n    const updateComic = () => { \n        clearError();\n        getComic(comicId)\n            .then(onComicLoaded);\n    };\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n};\n\nconst View = ({comic}) => {\n    const { title, description, pageCount, price, language, thumbnail } = comic;\n\n    const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n        ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={title} style={styleImg} className=\"single-comic__img\" />\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n};\n\nexport default SingleComicPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {loading, error, getAllCharacters, getCharacter, getAllComics, getComic, clearError};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(error) {\n            setLoading(false);\n            setError(error.message);\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n};"],"names":["src","img","style","display","width","height","objectFit","margin","alt","View","comic","title","description","pageCount","price","language","thumbnail","styleImg","className","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","char","name","length","slice","path","extension","homepage","urls","wiki","comics","items","prices","textObjects"],"sourceRoot":""}