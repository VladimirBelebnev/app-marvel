{"version":3,"file":"static/js/501.6a4bdcde.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport AppBanner from \"../appBanner/AppBanner\";\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams();\n    const [data, setData] = useState(null);\n    const { loading, error, getComic, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateData();\n        // eslint-disable-next-line\n    }, [id]);\n\n    const updateData = () => {\n        clearError();\n        // eslint-disable-next-line\n        switch (dataType) {\n            case 'comic': \n                getComic(id).then(onDataLoaded);\n                break;\n            case 'character':\n                getCharacter(id).then(onDataLoaded);\n        }\n    };\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !data) ? <Component data={data} /> : null;\n\n    return (\n        <>\n            <AppBanner />\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n};\n\nexport default SinglePage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {loading, error, getAllCharacters, getCharacter, getAllComics, getCharacterByName, getComic, clearError};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(error) {\n            setLoading(false);\n            setError(error.message);\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError};\n};"],"names":["className","src","avengers","alt","avengersLogo","img","style","display","width","height","objectFit","margin","Component","dataType","id","useParams","useState","data","setData","useMarvelService","loading","error","getComic","getCharacter","clearError","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_transformComics","getCharacterByName","name","char","length","slice","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}