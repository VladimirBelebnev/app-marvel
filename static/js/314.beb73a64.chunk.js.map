{"version":3,"file":"static/js/314.beb73a64.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","utils/setContentList.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: \n        'contain', margin: '0 auto' }} alt=\"error\" />\n    )\n};\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({data}) => {\n    const { thumbnail, name, description, homepage, wiki } = data;\n\n    const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' \n    ? {objectFit: \"contain\"} : {objectFit: \"cover\"});\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt={name} className=\"randomchar__img\" style={styleImg} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default RandomChar;","import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n \nimport setContentList from '../../utils/setContentList';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        };\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended)\n    };\n\n    const itemRefs = useRef([]);\n\n    const onItemFocus = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(data) {\n        const items = data.map((item, i) => {\n            const { id, name, thumbnail } = item;\n\n            const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' \n            ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n            return (\n                <CSSTransition\n                    key={id}\n                    timeout={500}\n                    classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        ref={element => itemRefs.current[i] = element}\n                        tabIndex={0}\n                        onClick={() => {\n                            props.onCharSelected(id);\n                            onItemFocus(i);\n                        }}\n                        onKeyPress={event => {\n                            if (event.key === '' || event.key === 'Enter') {\n                                props.onCharSelected(id);\n                                onItemFocus(i);\n                            }\n                        }}>\n                        <img src={thumbnail} alt={name} style={styleImg} />\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        }); \n\n        return (\n            <TransitionGroup className=\"char__grid\" component={'ul'}>\n                {items} \n            </TransitionGroup>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContentList(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n    \n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)} >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;","import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {process, setProcess, getCharacter, clearError} = useMarvelService();\n     \n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    const styleImg = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n        ? { objectFit: \"contain\" } : { objectFit: \"cover\" });\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={styleImg} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">{name}</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this chatacter.' }\n                {   \n                    // eslint-disable-next-line\n                    comics.map((item, i) => {\n                        if (i > 9) {\n                            return (\n                                <li className=\"char__comics-item\" key={i}>\n                                    <Link to={`/comics/${item.resourceURI.slice(43, 48)}`}>\n                                        {item.name}\n                                    </Link>\n                                </li>\n                            )\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n};\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}; \n\nexport default CharInfo;","import {useState} from 'react';\n\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const UserFound = () => {\n        return (\n            <div className=\"char__userFound\">\n                <p className=\"char__search-succses\">There is! Visit {char[0].name} page?</p>\n                <Link to={`/app-marvel/${char[0].id}`} className=\"button button__secondary\">\n                    <div className=\"inner\">To page</div>\n                </Link>\n            </div>\n        )\n    };\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-error\"><ErrorMessage/></div> : null;\n    const result = !char ? null : char.length > 0 ? <UserFound /> : <p className=\"char__search-error\">The character was not found. Check the name and try again</p>\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n            }} \n            validationSchema={Yup.object({\n                name: Yup.string()\n                    .min(3, 'Minimum three symbols.')\n                    .max(30, 'Maximum thirty symbols.')\n                    .required('This field is required.'),\n            })}\n            onSubmit={({name}) => {\n                updateChar(name);\n            }}>\n            <Form className=\"char__search\">\n                <p className=\"char__search-title\">Or find a character by name:</p>\n                <Field \n                    className=\"char__search-input\" \n                    type=\"text\" \n                    placeholder='Enter name' \n                    id=\"name\" \n                    name=\"name\" />\n                <button \n                    className=\"button  button__main char__search-btn\" \n                    type=\"submit\"\n                    disabled={process === 'loading'}>\n                    <div className=\"inner\">Find</div>\n                </button>\n                <FormikErrorMessage className=\"char__search-error\" name=\"name\" component=\"p\" />\n                {errorMessage}\n                {result}\n            </Form>\n        </Formik>\n    )\n};  \n\nexport default CharSearchForm;","import { Component } from \"react\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    };\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true,\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport {Helmet} from 'react-helmet';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div className=\"char__content-fixed\">\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n};\n\nexport default MainPage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0583c8fb8349856863fd5227fc3f33bd';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=\n        ${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: (char.name.length > 20) ? `${char.name.slice(0, 22)}...` : char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` \n            : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            language: comics.textObjects.language || 'en-us',\n        }\n    };\n\n    return {process, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getCharacterByName, \n            getComic, \n            clearError,\n            setProcess\n        };\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\nexport function useHttp() {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(error) {\n            setProcess('error');\n            throw error;\n        }\n\n    }, []);\n    \n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess};\n};","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />\n        case 'loading':\n            return <Spinner />\n        case 'error':\n            return <ErrorMessage />\n        case 'confirmed':\n            return <Component data={data} />\n        default:\n            throw new Error('Unexpected process state.');\n    }\n};\n\nexport default setContent;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\n\nconst setContentList = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'error':\n            return <ErrorMessage />\n        case 'confirmed':\n            return <Component />\n        default:\n            throw new Error('Unexpected process state.');\n    }\n};\n\nexport default setContentList;"],"names":["src","img","style","display","width","height","objectFit","margin","alt","View","data","thumbnail","name","description","homepage","wiki","styleImg","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","onItemFocus","current","forEach","item","classList","remove","add","focus","elements","useMemo","setContentList","items","map","i","CSSTransition","timeout","classNames","ref","element","tabIndex","onCharSelected","onKeyPress","event","key","TransitionGroup","component","renderItems","disabled","comics","to","resourceURI","slice","charId","getCharacterByName","UserFound","errorMessage","ErrorMessage","result","initialValues","validationSchema","Yup","min","max","required","onSubmit","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","Component","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","price","prices","pageCount","language","textObjects","Spinner"],"sourceRoot":""}